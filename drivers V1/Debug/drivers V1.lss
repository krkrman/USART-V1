
drivers V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bfc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800060  00800060  00000c70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028e0  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc3  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000164b  00000000  00000000  0000486f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000094c  00000000  00000000  00005ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000173c  00000000  00000000  00006808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b1  00000000  00000000  00007f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_1>
   8:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_2>
   c:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_7>
  20:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_8>
  24:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_9>
  28:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_10>
  2c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_13>
  38:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_14>
  3c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_15>
  40:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 01 	call	0x322	; 0x322 <main>
  8a:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidSendChar>:
	LCD_voidSendCommand(INCREMENT_CURSORMOVE);
	LCD_voidSendCommand(CLR_DISPLAY);
	LCD_voidSendCommand(CURSOR_AT_HOME);
}
void LCD_voidSendChar(char Copy_u8Data)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_RS,HIGH);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW,LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_E,HIGH);
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
		_delay_ms(2);
	#else
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Data, 4));
  aa:	c4 fb       	bst	r28, 4
  ac:	44 27       	eor	r20, r20
  ae:	40 f9       	bld	r20, 0
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Data, 5));
  b8:	c5 fb       	bst	r28, 5
  ba:	44 27       	eor	r20, r20
  bc:	40 f9       	bld	r20, 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Data, 6));
  c6:	c6 fb       	bst	r28, 6
  c8:	44 27       	eor	r20, r20
  ca:	40 f9       	bld	r20, 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Data, 7));
  d4:	4c 2f       	mov	r20, r28
  d6:	44 1f       	adc	r20, r20
  d8:	44 27       	eor	r20, r20
  da:	44 1f       	adc	r20, r20
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
	
		//set clock
		DIO_voidSetPinValue(LCD_E,HIGH);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_voidSendChar+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_voidSendChar+0x66>
  f8:	00 00       	nop
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_voidSendChar+0x76>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_voidSendChar+0x7c>
 10e:	00 00       	nop
		_delay_ms(2);
		
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Data, 0));
 110:	4c 2f       	mov	r20, r28
 112:	41 70       	andi	r20, 0x01	; 1
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Data, 1));
 11c:	c1 fb       	bst	r28, 1
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Data, 2));
 12a:	c2 fb       	bst	r28, 2
 12c:	44 27       	eor	r20, r20
 12e:	40 f9       	bld	r20, 0
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Data, 3));
 138:	c3 fb       	bst	r28, 3
 13a:	44 27       	eor	r20, r20
 13c:	40 f9       	bld	r20, 0
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		
		//set clock
		DIO_voidSetPinValue(LCD_E,HIGH);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	63 e0       	ldi	r22, 0x03	; 3
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_voidSendChar+0xc2>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_voidSendChar+0xc8>
 15a:	00 00       	nop
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_voidSendChar+0xd8>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_voidSendChar+0xde>
 170:	00 00       	nop
		
		
		
	#endif
	
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 Copy_u8Command)
{	
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
	//send command
	DIO_voidSetPinValue(LCD_RS,LOW);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW,LOW);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
		_delay_ms(2);
		
	#else
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 4));
 18e:	c4 fb       	bst	r28, 4
 190:	44 27       	eor	r20, r20
 192:	40 f9       	bld	r20, 0
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 5));
 19c:	c5 fb       	bst	r28, 5
 19e:	44 27       	eor	r20, r20
 1a0:	40 f9       	bld	r20, 0
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 6));
 1aa:	c6 fb       	bst	r28, 6
 1ac:	44 27       	eor	r20, r20
 1ae:	40 f9       	bld	r20, 0
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 7));
 1b8:	4c 2f       	mov	r20, r28
 1ba:	44 1f       	adc	r20, r20
 1bc:	44 27       	eor	r20, r20
 1be:	44 1f       	adc	r20, r20
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		
		//set clock
		DIO_voidSetPinValue(LCD_E,HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	87 e0       	ldi	r24, 0x07	; 7
 1ce:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_voidSendCommand+0x60>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_voidSendCommand+0x66>
 1dc:	00 00       	nop
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_voidSendCommand+0x76>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_voidSendCommand+0x7c>
 1f2:	00 00       	nop
		_delay_ms(2);
		
		if (isInitFinished)
 1f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f8:	88 23       	and	r24, r24
 1fa:	89 f1       	breq	.+98     	; 0x25e <LCD_voidSendCommand+0xe8>
		{
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 0));
 1fc:	4c 2f       	mov	r20, r28
 1fe:	41 70       	andi	r20, 0x01	; 1
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 1));
 208:	c1 fb       	bst	r28, 1
 20a:	44 27       	eor	r20, r20
 20c:	40 f9       	bld	r20, 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 2));
 216:	c2 fb       	bst	r28, 2
 218:	44 27       	eor	r20, r20
 21a:	40 f9       	bld	r20, 0
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 3));
 224:	c3 fb       	bst	r28, 3
 226:	44 27       	eor	r20, r20
 228:	40 f9       	bld	r20, 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
			
			//set clock
			DIO_voidSetPinValue(LCD_E,HIGH);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	87 e0       	ldi	r24, 0x07	; 7
 238:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_voidSendCommand+0xca>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_voidSendCommand+0xd0>
 246:	00 00       	nop
			_delay_ms(2);
			DIO_voidSetPinValue(LCD_E,LOW);
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
 252:	8f e9       	ldi	r24, 0x9F	; 159
 254:	9f e0       	ldi	r25, 0x0F	; 15
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_voidSendCommand+0xe0>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_voidSendCommand+0xe6>
 25c:	00 00       	nop
			_delay_ms(2);
		}
	#endif
	
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <LCD_voidInit>:
#include "util/delay.h"

static u8 isInitFinished = 0;
void LCD_voidInit(void)
{
	DIO_voidSetPinDirection(LCD_RS,OUTPUT);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW,OUTPUT);
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E,OUTPUT);
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	63 e0       	ldi	r22, 0x03	; 3
 27a:	87 e0       	ldi	r24, 0x07	; 7
 27c:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
	#if MODE == EIGHT_BIT_MODE
		DIO_voidSetPortDirection(LCD_8_BIT_DATA_PORT , OUTPUT);
		
	#else
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D4,OUTPUT);
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D5,OUTPUT);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D6,OUTPUT);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D7,OUTPUT);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <LCD_voidInit+0x4c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_voidInit+0x56>
 2b8:	00 00       	nop

	#endif
	
	_delay_ms(40);
	LCD_voidSendCommand(FUNC_SET);
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_voidInit+0x62>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_voidInit+0x68>
 2ca:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_voidInit+0x74>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_voidInit+0x7a>
 2dc:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
 2e4:	8f e9       	ldi	r24, 0x9F	; 159
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_voidInit+0x86>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_voidInit+0x8c>
 2ee:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(0b00100000);
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_voidInit+0x98>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_voidInit+0x9e>
 300:	00 00       	nop
	_delay_ms(2);
	isInitFinished = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
	LCD_voidSendCommand(INCREMENT_CURSORMOVE);
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLR_DISPLAY);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
	LCD_voidSendCommand(CURSOR_AT_HOME);
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_voidSendCommand>
 320:	08 95       	ret

00000322 <main>:
#include "MCAL/SPI/SPI_interface.h"
#include "HAL/LCD/LCD_interface.h"
#include "MCAL/DIO/DIO_interface.h"

int main(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	2a 97       	sbiw	r28, 0x0a	; 10
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	USART_voidInit(TRANSMIT_RECIEVE , ASYNCRONOUS , EIGHT_BITS , DISAPLED , TWO_STOP_BIT , 2400);
 336:	0f 2e       	mov	r0, r31
 338:	f0 e6       	ldi	r31, 0x60	; 96
 33a:	ef 2e       	mov	r14, r31
 33c:	f9 e0       	ldi	r31, 0x09	; 9
 33e:	ff 2e       	mov	r15, r31
 340:	f0 2d       	mov	r31, r0
 342:	01 e0       	ldi	r16, 0x01	; 1
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	43 e0       	ldi	r20, 0x03	; 3
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <USART_voidInit>
	LCD_voidInit();
 350:	0e 94 31 01 	call	0x262	; 0x262 <LCD_voidInit>
		SPI_voidMasterTransmit(i);
		_delay_ms(100);
	}
	*/
	u8 string[10];
	u8 i = 0;
 354:	00 e0       	ldi	r16, 0x00	; 0
 356:	01 c0       	rjmp	.+2      	; 0x35a <main+0x38>
#include "MCAL/SPI/SPI_interface.h"
#include "HAL/LCD/LCD_interface.h"
#include "MCAL/DIO/DIO_interface.h"

int main(void)
{
 358:	0f 2d       	mov	r16, r15
	*/
	u8 string[10];
	u8 i = 0;
    while (1) 
    {
		u8 data = USART_u8RecieveData();
 35a:	0e 94 49 05 	call	0xa92	; 0xa92 <USART_u8RecieveData>
 35e:	18 2f       	mov	r17, r24
		string[i++] = data;
 360:	ff 24       	eor	r15, r15
 362:	f3 94       	inc	r15
 364:	f0 0e       	add	r15, r16
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 0f       	add	r30, r28
 36c:	fd 1f       	adc	r31, r29
 36e:	e0 0f       	add	r30, r16
 370:	f1 1d       	adc	r31, r1
 372:	80 83       	st	Z, r24
		LCD_voidSendChar(data);
 374:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendChar>
		if (data == '\r')
 378:	1d 30       	cpi	r17, 0x0D	; 13
 37a:	71 f7       	brne	.-36     	; 0x358 <main+0x36>
		{
			string[i] = NULL;
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	ef 0d       	add	r30, r15
 386:	f1 1d       	adc	r31, r1
 388:	10 82       	st	Z, r1
			USART_voidTransmitString(string);
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_voidTransmitString>
 392:	e2 cf       	rjmp	.-60     	; 0x358 <main+0x36>

00000394 <ADC_voidStartConversion>:
	//enable ADC interrupt
	SET_BIT(ADCSRA_REG , 3);
	// enable GIE
	SET_BIT(SREG_REG,7);
	ADC_callback = callback;
	ADC_voidStartConversion(channel);
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	0e 94 18 02 	call	0x430	; 0x430 <DIO_voidSetPinDirection>
 3a0:	87 b1       	in	r24, 0x07	; 7
 3a2:	80 7e       	andi	r24, 0xE0	; 224
 3a4:	87 b9       	out	0x07, r24	; 7
 3a6:	87 b1       	in	r24, 0x07	; 7
 3a8:	8c 2b       	or	r24, r28
 3aa:	87 b9       	out	0x07, r24	; 7
 3ac:	86 b1       	in	r24, 0x06	; 6
 3ae:	80 64       	ori	r24, 0x40	; 64
 3b0:	86 b9       	out	0x06, r24	; 6
 3b2:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <adcChannel>
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <__vector_16>:
};

void ADC_ISR_VECTOR(void)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
	if (ADC_callback != 0)
 3dc:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ADC_callback>
 3e0:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ADC_callback+0x1>
 3e4:	30 97       	sbiw	r30, 0x00	; 0
 3e6:	71 f0       	breq	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		ADC_callback(ADCHL_REG);
 3e8:	84 b1       	in	r24, 0x04	; 4
 3ea:	95 b1       	in	r25, 0x05	; 5
 3ec:	09 95       	icall
		SET_BIT(ADCSRA_REG , 4);
 3ee:	86 b1       	in	r24, 0x06	; 6
 3f0:	80 61       	ori	r24, 0x10	; 16
 3f2:	86 b9       	out	0x06, r24	; 6
		if (adcMode == ADC_MODE_COUNTINOUS_CONVERSION)
 3f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adcMode>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	21 f4       	brne	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			ADC_voidStartConversion(adcChannel);
 3fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcChannel>
 400:	0e 94 ca 01 	call	0x394	; 0x394 <ADC_voidStartConversion>
		}
	}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <CLOCK_u32GetSystemClock>:
	__asm__ volatile("NOP");
}

u32 CLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	72 e1       	ldi	r23, 0x12	; 18
 42a:	8a e7       	ldi	r24, 0x7A	; 122
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	08 95       	ret

00000430 <DIO_voidSetPinDirection>:
			DDRD_REG=0x00;
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
		{
			PORTD_REG=0xFF;
			DDRD_REG=0x00;
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	e1 f1       	breq	.+120    	; 0x4ac <DIO_voidSetPinDirection+0x7c>
 434:	38 f0       	brcs	.+14     	; 0x444 <DIO_voidSetPinDirection+0x14>
 436:	62 30       	cpi	r22, 0x02	; 2
 438:	09 f4       	brne	.+2      	; 0x43c <DIO_voidSetPinDirection+0xc>
 43a:	6c c0       	rjmp	.+216    	; 0x514 <DIO_voidSetPinDirection+0xe4>
 43c:	63 30       	cpi	r22, 0x03	; 3
 43e:	09 f4       	brne	.+2      	; 0x442 <DIO_voidSetPinDirection+0x12>
 440:	9d c0       	rjmp	.+314    	; 0x57c <DIO_voidSetPinDirection+0x14c>
 442:	08 95       	ret
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	69 f4       	brne	.+26     	; 0x462 <DIO_voidSetPinDirection+0x32>
 448:	4a b3       	in	r20, 0x1a	; 26
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_voidSetPinDirection+0x26>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_voidSetPinDirection+0x22>
 45a:	cb 01       	movw	r24, r22
 45c:	84 2b       	or	r24, r20
 45e:	8a bb       	out	0x1a, r24	; 26
 460:	08 95       	ret
 462:	41 11       	cpse	r20, r1
 464:	0e c0       	rjmp	.+28     	; 0x482 <DIO_voidSetPinDirection+0x52>
 466:	4a b3       	in	r20, 0x1a	; 26
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_voidSetPinDirection+0x44>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_voidSetPinDirection+0x40>
 478:	cb 01       	movw	r24, r22
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	8a bb       	out	0x1a, r24	; 26
 480:	08 95       	ret
 482:	42 30       	cpi	r20, 0x02	; 2
 484:	09 f0       	breq	.+2      	; 0x488 <DIO_voidSetPinDirection+0x58>
 486:	ac c0       	rjmp	.+344    	; 0x5e0 <DIO_voidSetPinDirection+0x1b0>
 488:	4b b3       	in	r20, 0x1b	; 27
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_voidSetPinDirection+0x66>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_voidSetPinDirection+0x62>
 49a:	cb 01       	movw	r24, r22
 49c:	94 2f       	mov	r25, r20
 49e:	98 2b       	or	r25, r24
 4a0:	9b bb       	out	0x1b, r25	; 27
 4a2:	9a b3       	in	r25, 0x1a	; 26
 4a4:	80 95       	com	r24
 4a6:	89 23       	and	r24, r25
 4a8:	8a bb       	out	0x1a, r24	; 26
 4aa:	08 95       	ret
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	69 f4       	brne	.+26     	; 0x4ca <DIO_voidSetPinDirection+0x9a>
 4b0:	47 b3       	in	r20, 0x17	; 23
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_voidSetPinDirection+0x8e>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_voidSetPinDirection+0x8a>
 4c2:	cb 01       	movw	r24, r22
 4c4:	84 2b       	or	r24, r20
 4c6:	87 bb       	out	0x17, r24	; 23
 4c8:	08 95       	ret
 4ca:	41 11       	cpse	r20, r1
 4cc:	0e c0       	rjmp	.+28     	; 0x4ea <DIO_voidSetPinDirection+0xba>
 4ce:	47 b3       	in	r20, 0x17	; 23
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	b9 01       	movw	r22, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_voidSetPinDirection+0xac>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_voidSetPinDirection+0xa8>
 4e0:	cb 01       	movw	r24, r22
 4e2:	80 95       	com	r24
 4e4:	84 23       	and	r24, r20
 4e6:	87 bb       	out	0x17, r24	; 23
 4e8:	08 95       	ret
 4ea:	42 30       	cpi	r20, 0x02	; 2
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <DIO_voidSetPinDirection+0xc0>
 4ee:	78 c0       	rjmp	.+240    	; 0x5e0 <DIO_voidSetPinDirection+0x1b0>
 4f0:	48 b3       	in	r20, 0x18	; 24
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_voidSetPinDirection+0xce>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_voidSetPinDirection+0xca>
 502:	cb 01       	movw	r24, r22
 504:	94 2f       	mov	r25, r20
 506:	98 2b       	or	r25, r24
 508:	98 bb       	out	0x18, r25	; 24
 50a:	97 b3       	in	r25, 0x17	; 23
 50c:	80 95       	com	r24
 50e:	89 23       	and	r24, r25
 510:	87 bb       	out	0x17, r24	; 23
 512:	08 95       	ret
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	69 f4       	brne	.+26     	; 0x532 <DIO_voidSetPinDirection+0x102>
 518:	44 b3       	in	r20, 0x14	; 20
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_voidSetPinDirection+0xf6>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_voidSetPinDirection+0xf2>
 52a:	cb 01       	movw	r24, r22
 52c:	84 2b       	or	r24, r20
 52e:	84 bb       	out	0x14, r24	; 20
 530:	08 95       	ret
 532:	41 11       	cpse	r20, r1
 534:	0e c0       	rjmp	.+28     	; 0x552 <DIO_voidSetPinDirection+0x122>
 536:	44 b3       	in	r20, 0x14	; 20
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_voidSetPinDirection+0x114>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_voidSetPinDirection+0x110>
 548:	cb 01       	movw	r24, r22
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	84 bb       	out	0x14, r24	; 20
 550:	08 95       	ret
 552:	42 30       	cpi	r20, 0x02	; 2
 554:	09 f0       	breq	.+2      	; 0x558 <DIO_voidSetPinDirection+0x128>
 556:	44 c0       	rjmp	.+136    	; 0x5e0 <DIO_voidSetPinDirection+0x1b0>
 558:	45 b3       	in	r20, 0x15	; 21
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_voidSetPinDirection+0x136>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_voidSetPinDirection+0x132>
 56a:	cb 01       	movw	r24, r22
 56c:	94 2f       	mov	r25, r20
 56e:	98 2b       	or	r25, r24
 570:	95 bb       	out	0x15, r25	; 21
 572:	94 b3       	in	r25, 0x14	; 20
 574:	80 95       	com	r24
 576:	89 23       	and	r24, r25
 578:	84 bb       	out	0x14, r24	; 20
 57a:	08 95       	ret
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	69 f4       	brne	.+26     	; 0x59a <DIO_voidSetPinDirection+0x16a>
 580:	41 b3       	in	r20, 0x11	; 17
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	b9 01       	movw	r22, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_voidSetPinDirection+0x15e>
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_voidSetPinDirection+0x15a>
 592:	cb 01       	movw	r24, r22
 594:	84 2b       	or	r24, r20
 596:	81 bb       	out	0x11, r24	; 17
 598:	08 95       	ret
 59a:	41 11       	cpse	r20, r1
 59c:	0e c0       	rjmp	.+28     	; 0x5ba <DIO_voidSetPinDirection+0x18a>
 59e:	41 b3       	in	r20, 0x11	; 17
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	b9 01       	movw	r22, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_voidSetPinDirection+0x17c>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	8a 95       	dec	r24
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_voidSetPinDirection+0x178>
 5b0:	cb 01       	movw	r24, r22
 5b2:	80 95       	com	r24
 5b4:	84 23       	and	r24, r20
 5b6:	81 bb       	out	0x11, r24	; 17
 5b8:	08 95       	ret
 5ba:	42 30       	cpi	r20, 0x02	; 2
 5bc:	89 f4       	brne	.+34     	; 0x5e0 <DIO_voidSetPinDirection+0x1b0>
 5be:	42 b3       	in	r20, 0x12	; 18
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_voidSetPinDirection+0x19c>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_voidSetPinDirection+0x198>
 5d0:	cb 01       	movw	r24, r22
 5d2:	94 2f       	mov	r25, r20
 5d4:	98 2b       	or	r25, r24
 5d6:	92 bb       	out	0x12, r25	; 18
 5d8:	91 b3       	in	r25, 0x11	; 17
 5da:	80 95       	com	r24
 5dc:	89 23       	and	r24, r25
 5de:	81 bb       	out	0x11, r24	; 17
 5e0:	08 95       	ret

000005e2 <DIO_voidSetPinValue>:

}

void DIO_voidSetPinValue (u8 Copy_u8PinNumber, DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch (DIO_port)
 5e2:	61 30       	cpi	r22, 0x01	; 1
 5e4:	39 f1       	breq	.+78     	; 0x634 <DIO_voidSetPinValue+0x52>
 5e6:	38 f0       	brcs	.+14     	; 0x5f6 <DIO_voidSetPinValue+0x14>
 5e8:	62 30       	cpi	r22, 0x02	; 2
 5ea:	09 f4       	brne	.+2      	; 0x5ee <DIO_voidSetPinValue+0xc>
 5ec:	42 c0       	rjmp	.+132    	; 0x672 <DIO_voidSetPinValue+0x90>
 5ee:	63 30       	cpi	r22, 0x03	; 3
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <DIO_voidSetPinValue+0x12>
 5f2:	5e c0       	rjmp	.+188    	; 0x6b0 <DIO_voidSetPinValue+0xce>
 5f4:	08 95       	ret
	{
		case PORTA:
			if( Copy_u8Value == HIGH)
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	69 f4       	brne	.+26     	; 0x614 <DIO_voidSetPinValue+0x32>
			{
				SET_BIT(PORTA_REG , Copy_u8PinNumber);
 5fa:	4b b3       	in	r20, 0x1b	; 27
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_voidSetPinValue+0x26>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_voidSetPinValue+0x22>
 60c:	cb 01       	movw	r24, r22
 60e:	84 2b       	or	r24, r20
 610:	8b bb       	out	0x1b, r24	; 27
 612:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 614:	41 11       	cpse	r20, r1
 616:	6a c0       	rjmp	.+212    	; 0x6ec <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTA_REG , Copy_u8PinNumber);
 618:	4b b3       	in	r20, 0x1b	; 27
 61a:	21 e0       	ldi	r18, 0x01	; 1
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	b9 01       	movw	r22, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_voidSetPinValue+0x44>
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	8a 95       	dec	r24
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_voidSetPinValue+0x40>
 62a:	cb 01       	movw	r24, r22
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	8b bb       	out	0x1b, r24	; 27
 632:	08 95       	ret
			}
			break;

		case PORTB:
			if(Copy_u8Value == HIGH)
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	69 f4       	brne	.+26     	; 0x652 <DIO_voidSetPinValue+0x70>
			{
				SET_BIT(PORTB_REG , Copy_u8PinNumber);
 638:	48 b3       	in	r20, 0x18	; 24
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	b9 01       	movw	r22, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_voidSetPinValue+0x64>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	8a 95       	dec	r24
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_voidSetPinValue+0x60>
 64a:	cb 01       	movw	r24, r22
 64c:	84 2b       	or	r24, r20
 64e:	88 bb       	out	0x18, r24	; 24
 650:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 652:	41 11       	cpse	r20, r1
 654:	4b c0       	rjmp	.+150    	; 0x6ec <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTB_REG , Copy_u8PinNumber);
 656:	48 b3       	in	r20, 0x18	; 24
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	b9 01       	movw	r22, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_voidSetPinValue+0x82>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_voidSetPinValue+0x7e>
 668:	cb 01       	movw	r24, r22
 66a:	80 95       	com	r24
 66c:	84 23       	and	r24, r20
 66e:	88 bb       	out	0x18, r24	; 24
 670:	08 95       	ret
			}
			break;

		case PORTC:

			if( Copy_u8Value == HIGH)
 672:	41 30       	cpi	r20, 0x01	; 1
 674:	69 f4       	brne	.+26     	; 0x690 <DIO_voidSetPinValue+0xae>
			{
				SET_BIT(PORTC_REG , Copy_u8PinNumber);
 676:	45 b3       	in	r20, 0x15	; 21
 678:	21 e0       	ldi	r18, 0x01	; 1
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	b9 01       	movw	r22, r18
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_voidSetPinValue+0xa2>
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	8a 95       	dec	r24
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_voidSetPinValue+0x9e>
 688:	cb 01       	movw	r24, r22
 68a:	84 2b       	or	r24, r20
 68c:	85 bb       	out	0x15, r24	; 21
 68e:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 690:	41 11       	cpse	r20, r1
 692:	2c c0       	rjmp	.+88     	; 0x6ec <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTC_REG , Copy_u8PinNumber);
 694:	45 b3       	in	r20, 0x15	; 21
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	b9 01       	movw	r22, r18
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_voidSetPinValue+0xc0>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_voidSetPinValue+0xbc>
 6a6:	cb 01       	movw	r24, r22
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	85 bb       	out	0x15, r24	; 21
 6ae:	08 95       	ret
			}
			break;

		case PORTD:

			if( Copy_u8Value == HIGH)
 6b0:	41 30       	cpi	r20, 0x01	; 1
 6b2:	69 f4       	brne	.+26     	; 0x6ce <DIO_voidSetPinValue+0xec>
			{
				SET_BIT(PORTD_REG , Copy_u8PinNumber);
 6b4:	42 b3       	in	r20, 0x12	; 18
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	b9 01       	movw	r22, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_voidSetPinValue+0xe0>
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	8a 95       	dec	r24
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_voidSetPinValue+0xdc>
 6c6:	cb 01       	movw	r24, r22
 6c8:	84 2b       	or	r24, r20
 6ca:	82 bb       	out	0x12, r24	; 18
 6cc:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 6ce:	41 11       	cpse	r20, r1
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTD_REG , Copy_u8PinNumber);
 6d2:	42 b3       	in	r20, 0x12	; 18
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	b9 01       	movw	r22, r18
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_voidSetPinValue+0xfe>
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	8a 95       	dec	r24
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_voidSetPinValue+0xfa>
 6e4:	cb 01       	movw	r24, r22
 6e6:	80 95       	com	r24
 6e8:	84 23       	and	r24, r20
 6ea:	82 bb       	out	0x12, r24	; 18
 6ec:	08 95       	ret

000006ee <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
 710:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <EXTI_voidCallBacks>
 714:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <EXTI_voidCallBacks+0x1>
 718:	30 97       	sbiw	r30, 0x00	; 0
 71a:	09 f0       	breq	.+2      	; 0x71e <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
 71c:	09 95       	icall
	}
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
 762:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <EXTI_voidCallBacks+0x2>
 766:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <EXTI_voidCallBacks+0x3>
 76a:	30 97       	sbiw	r30, 0x00	; 0
 76c:	09 f0       	breq	.+2      	; 0x770 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
 76e:	09 95       	icall
	}
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
 7b4:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <EXTI_voidCallBacks+0x4>
 7b8:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <EXTI_voidCallBacks+0x5>
 7bc:	30 97       	sbiw	r30, 0x00	; 0
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
 7c0:	09 95       	icall
	}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
 7e4:	1f 92       	push	r1
 7e6:	0f 92       	push	r0
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	0f 92       	push	r0
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 93       	push	r18
 7f0:	3f 93       	push	r19
 7f2:	4f 93       	push	r20
 7f4:	5f 93       	push	r21
 7f6:	6f 93       	push	r22
 7f8:	7f 93       	push	r23
 7fa:	8f 93       	push	r24
 7fc:	9f 93       	push	r25
 7fe:	af 93       	push	r26
 800:	bf 93       	push	r27
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
 806:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMER0_callBacks>
 80a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMER0_callBacks+0x1>
 80e:	30 97       	sbiw	r30, 0x00	; 0
 810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		TIMER0_callBacks[0]();
 812:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
 814:	88 b7       	in	r24, 0x38	; 56
 816:	81 60       	ori	r24, 0x01	; 1
 818:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
 81a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <storedPreload>
 81e:	82 bf       	out	0x32, r24	; 50
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	if (isSoftwarePWMMode)
 864:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <isSoftwarePWMMode>
 868:	88 23       	and	r24, r24
 86a:	f1 f0       	breq	.+60     	; 0x8a8 <__stack+0x49>
	{
		SoftwarePWM_counter++;
 86c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <SoftwarePWM_counter>
 870:	8f 5f       	subi	r24, 0xFF	; 255
 872:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
 876:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <SoftwarePWM_dutyCycle>
 87a:	89 17       	cp	r24, r25
 87c:	38 f0       	brcs	.+14     	; 0x88c <__stack+0x2d>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <SoftwarePWM_PORT>
 884:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SoftwarePWM_PIN>
 888:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
 88c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <SoftwarePWM_counter>
 890:	84 36       	cpi	r24, 0x64	; 100
 892:	88 f0       	brcs	.+34     	; 0x8b6 <__stack+0x57>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
 894:	41 e0       	ldi	r20, 0x01	; 1
 896:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <SoftwarePWM_PORT>
 89a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SoftwarePWM_PIN>
 89e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
 8a2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <SoftwarePWM_counter>
 8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <__stack+0x57>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
 8a8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER0_callBacks+0x2>
 8ac:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER0_callBacks+0x3>
 8b0:	30 97       	sbiw	r30, 0x00	; 0
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__stack+0x57>
			TIMER0_callBacks[1]();
 8b4:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
 8b6:	88 b7       	in	r24, 0x38	; 56
 8b8:	82 60       	ori	r24, 0x02	; 2
 8ba:	88 bf       	out	0x38, r24	; 56
}
 8bc:	ff 91       	pop	r31
 8be:	ef 91       	pop	r30
 8c0:	bf 91       	pop	r27
 8c2:	af 91       	pop	r26
 8c4:	9f 91       	pop	r25
 8c6:	8f 91       	pop	r24
 8c8:	7f 91       	pop	r23
 8ca:	6f 91       	pop	r22
 8cc:	5f 91       	pop	r21
 8ce:	4f 91       	pop	r20
 8d0:	3f 91       	pop	r19
 8d2:	2f 91       	pop	r18
 8d4:	0f 90       	pop	r0
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	0f 90       	pop	r0
 8da:	1f 90       	pop	r1
 8dc:	18 95       	reti

000008de <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	2f 93       	push	r18
 8ea:	3f 93       	push	r19
 8ec:	4f 93       	push	r20
 8ee:	5f 93       	push	r21
 8f0:	6f 93       	push	r22
 8f2:	7f 93       	push	r23
 8f4:	8f 93       	push	r24
 8f6:	9f 93       	push	r25
 8f8:	af 93       	push	r26
 8fa:	bf 93       	push	r27
 8fc:	ef 93       	push	r30
 8fe:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
 900:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIMER1_callBacks+0x4>
 904:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIMER1_callBacks+0x5>
 908:	30 97       	sbiw	r30, 0x00	; 0
 90a:	09 f0       	breq	.+2      	; 0x90e <__vector_7+0x30>
	TIMER1_callBacks[2]();
 90c:	09 95       	icall
}
 90e:	ff 91       	pop	r31
 910:	ef 91       	pop	r30
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	7f 91       	pop	r23
 91c:	6f 91       	pop	r22
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	ef 93       	push	r30
 950:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
 952:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TIMER1_callBacks+0x2>
 956:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TIMER1_callBacks+0x3>
 95a:	30 97       	sbiw	r30, 0x00	; 0
 95c:	09 f0       	breq	.+2      	; 0x960 <__vector_8+0x30>
	TIMER1_callBacks[1]();
 95e:	09 95       	icall
}
 960:	ff 91       	pop	r31
 962:	ef 91       	pop	r30
 964:	bf 91       	pop	r27
 966:	af 91       	pop	r26
 968:	9f 91       	pop	r25
 96a:	8f 91       	pop	r24
 96c:	7f 91       	pop	r23
 96e:	6f 91       	pop	r22
 970:	5f 91       	pop	r21
 972:	4f 91       	pop	r20
 974:	3f 91       	pop	r19
 976:	2f 91       	pop	r18
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	0f 90       	pop	r0
 97e:	1f 90       	pop	r1
 980:	18 95       	reti

00000982 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	ef 93       	push	r30
 9a2:	ff 93       	push	r31
	overflowCounter++;
 9a4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <overflowCounter>
 9a8:	8f 5f       	subi	r24, 0xFF	; 255
 9aa:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
 9ae:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <TIMER1_callBacks>
 9b2:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <TIMER1_callBacks+0x1>
 9b6:	30 97       	sbiw	r30, 0x00	; 0
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_9+0x3a>
		TIMER1_callBacks[0]();
 9ba:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
 9bc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <TIMER1_storedPreload>
 9c0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <TIMER1_storedPreload+0x1>
 9c4:	9d bd       	out	0x2d, r25	; 45
 9c6:	8c bd       	out	0x2c, r24	; 44
}
 9c8:	ff 91       	pop	r31
 9ca:	ef 91       	pop	r30
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	9f 91       	pop	r25
 9d2:	8f 91       	pop	r24
 9d4:	7f 91       	pop	r23
 9d6:	6f 91       	pop	r22
 9d8:	5f 91       	pop	r21
 9da:	4f 91       	pop	r20
 9dc:	3f 91       	pop	r19
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <USART_voidInit>:
	}
}

void USART_voidDisableInterrupt(USART_Interrupt interrupt)
{
	CLR_BIT(UCSRB_REG , interrupt);
 9ea:	df 92       	push	r13
 9ec:	ef 92       	push	r14
 9ee:	ff 92       	push	r15
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	d8 2e       	mov	r13, r24
 9fa:	16 2f       	mov	r17, r22
 9fc:	c4 2f       	mov	r28, r20
 9fe:	d2 2f       	mov	r29, r18
 a00:	61 11       	cpse	r22, r1
 a02:	10 c0       	rjmp	.+32     	; 0xa24 <USART_voidInit+0x3a>
 a04:	0e 94 13 02 	call	0x426	; 0x426 <CLOCK_u32GetSystemClock>
 a08:	97 01       	movw	r18, r14
 a0a:	22 95       	swap	r18
 a0c:	32 95       	swap	r19
 a0e:	30 7f       	andi	r19, 0xF0	; 240
 a10:	32 27       	eor	r19, r18
 a12:	20 7f       	andi	r18, 0xF0	; 240
 a14:	32 27       	eor	r19, r18
 a16:	40 e0       	ldi	r20, 0x00	; 0
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
 a1e:	21 50       	subi	r18, 0x01	; 1
 a20:	31 09       	sbc	r19, r1
 a22:	0b c0       	rjmp	.+22     	; 0xa3a <USART_voidInit+0x50>
 a24:	0e 94 13 02 	call	0x426	; 0x426 <CLOCK_u32GetSystemClock>
 a28:	97 01       	movw	r18, r14
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
 a36:	21 50       	subi	r18, 0x01	; 1
 a38:	31 09       	sbc	r19, r1
 a3a:	80 b5       	in	r24, 0x20	; 32
 a3c:	8f 77       	andi	r24, 0x7F	; 127
 a3e:	80 bd       	out	0x20, r24	; 32
 a40:	30 bd       	out	0x20, r19	; 32
 a42:	29 b9       	out	0x09, r18	; 9
 a44:	dd 0c       	add	r13, r13
 a46:	dd 0c       	add	r13, r13
 a48:	dd 0c       	add	r13, r13
 a4a:	da b8       	out	0x0a, r13	; 10
 a4c:	80 b5       	in	r24, 0x20	; 32
 a4e:	80 68       	ori	r24, 0x80	; 128
 a50:	80 bd       	out	0x20, r24	; 32
 a52:	80 e4       	ldi	r24, 0x40	; 64
 a54:	18 9f       	mul	r17, r24
 a56:	b0 01       	movw	r22, r0
 a58:	11 24       	eor	r1, r1
 a5a:	80 e1       	ldi	r24, 0x10	; 16
 a5c:	d8 9f       	mul	r29, r24
 a5e:	90 01       	movw	r18, r0
 a60:	11 24       	eor	r1, r1
 a62:	10 e0       	ldi	r17, 0x00	; 0
 a64:	00 0f       	add	r16, r16
 a66:	11 1f       	adc	r17, r17
 a68:	00 0f       	add	r16, r16
 a6a:	11 1f       	adc	r17, r17
 a6c:	00 0f       	add	r16, r16
 a6e:	11 1f       	adc	r17, r17
 a70:	4c 2f       	mov	r20, r28
 a72:	50 e0       	ldi	r21, 0x00	; 0
 a74:	44 0f       	add	r20, r20
 a76:	55 1f       	adc	r21, r21
 a78:	60 68       	ori	r22, 0x80	; 128
 a7a:	62 2b       	or	r22, r18
 a7c:	06 2b       	or	r16, r22
 a7e:	40 2b       	or	r20, r16
 a80:	40 bd       	out	0x20, r20	; 32
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	1f 91       	pop	r17
 a88:	0f 91       	pop	r16
 a8a:	ff 90       	pop	r15
 a8c:	ef 90       	pop	r14
 a8e:	df 90       	pop	r13
 a90:	08 95       	ret

00000a92 <USART_u8RecieveData>:
}

u8 USART_u8RecieveData(void)
{
	/* Wait for data to be received */
	while ( !GET_BIT(UCSRA_REG , 7));
 a92:	5f 9b       	sbis	0x0b, 7	; 11
 a94:	fe cf       	rjmp	.-4      	; 0xa92 <USART_u8RecieveData>

	return UDR_REG;
 a96:	8c b1       	in	r24, 0x0c	; 12
}
 a98:	08 95       	ret

00000a9a <USART_voidTransmitChar>:
void USART_voidTransmitChar(u8 data)
{
	/* Wait for empty transmit buffer */
	while (!GET_BIT(UCSRA_REG , 5));
 a9a:	5d 9b       	sbis	0x0b, 5	; 11
 a9c:	fe cf       	rjmp	.-4      	; 0xa9a <USART_voidTransmitChar>
	/* Put data into buffer, sends the data */
	UDR_REG = data;
 a9e:	8c b9       	out	0x0c, r24	; 12
 aa0:	08 95       	ret

00000aa2 <USART_voidTransmitString>:
}
void USART_voidTransmitString(u8* string)
{
 aa2:	0f 93       	push	r16
 aa4:	1f 93       	push	r17
 aa6:	cf 93       	push	r28
 aa8:	8c 01       	movw	r16, r24
	u8 i = 0;
 aaa:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0')
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <USART_voidTransmitString+0x12>
	{
		USART_voidTransmitChar(string[i]);
 aae:	0e 94 4d 05 	call	0xa9a	; 0xa9a <USART_voidTransmitChar>
		i++;
 ab2:	cf 5f       	subi	r28, 0xFF	; 255
	UDR_REG = data;
}
void USART_voidTransmitString(u8* string)
{
	u8 i = 0;
	while(string[i] != '\0')
 ab4:	f8 01       	movw	r30, r16
 ab6:	ec 0f       	add	r30, r28
 ab8:	f1 1d       	adc	r31, r1
 aba:	80 81       	ld	r24, Z
 abc:	81 11       	cpse	r24, r1
 abe:	f7 cf       	rjmp	.-18     	; 0xaae <USART_voidTransmitString+0xc>
	{
		USART_voidTransmitChar(string[i]);
		i++;
	}
}
 ac0:	cf 91       	pop	r28
 ac2:	1f 91       	pop	r17
 ac4:	0f 91       	pop	r16
 ac6:	08 95       	ret

00000ac8 <__vector_13>:

void USART_ISR_RECIEVE_COMPLETE(void)
{
 ac8:	1f 92       	push	r1
 aca:	0f 92       	push	r0
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	0f 92       	push	r0
 ad0:	11 24       	eor	r1, r1
 ad2:	2f 93       	push	r18
 ad4:	3f 93       	push	r19
 ad6:	4f 93       	push	r20
 ad8:	5f 93       	push	r21
 ada:	6f 93       	push	r22
 adc:	7f 93       	push	r23
 ade:	8f 93       	push	r24
 ae0:	9f 93       	push	r25
 ae2:	af 93       	push	r26
 ae4:	bf 93       	push	r27
 ae6:	ef 93       	push	r30
 ae8:	ff 93       	push	r31
	USART_recieveCallBack(UDR_REG);
 aea:	8c b1       	in	r24, 0x0c	; 12
 aec:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <USART_recieveCallBack>
 af0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <USART_recieveCallBack+0x1>
 af4:	09 95       	icall
}
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	bf 91       	pop	r27
 afc:	af 91       	pop	r26
 afe:	9f 91       	pop	r25
 b00:	8f 91       	pop	r24
 b02:	7f 91       	pop	r23
 b04:	6f 91       	pop	r22
 b06:	5f 91       	pop	r21
 b08:	4f 91       	pop	r20
 b0a:	3f 91       	pop	r19
 b0c:	2f 91       	pop	r18
 b0e:	0f 90       	pop	r0
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	0f 90       	pop	r0
 b14:	1f 90       	pop	r1
 b16:	18 95       	reti

00000b18 <__vector_15>:

void USART_ISR_TRANSMIT_COMPLETE(void)
{
 b18:	1f 92       	push	r1
 b1a:	0f 92       	push	r0
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	0f 92       	push	r0
 b20:	11 24       	eor	r1, r1
 b22:	2f 93       	push	r18
 b24:	3f 93       	push	r19
 b26:	4f 93       	push	r20
 b28:	5f 93       	push	r21
 b2a:	6f 93       	push	r22
 b2c:	7f 93       	push	r23
 b2e:	8f 93       	push	r24
 b30:	9f 93       	push	r25
 b32:	af 93       	push	r26
 b34:	bf 93       	push	r27
 b36:	ef 93       	push	r30
 b38:	ff 93       	push	r31
	USART_callBacks[1]();
 b3a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <USART_callBacks+0x2>
 b3e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <USART_callBacks+0x3>
 b42:	09 95       	icall
}
 b44:	ff 91       	pop	r31
 b46:	ef 91       	pop	r30
 b48:	bf 91       	pop	r27
 b4a:	af 91       	pop	r26
 b4c:	9f 91       	pop	r25
 b4e:	8f 91       	pop	r24
 b50:	7f 91       	pop	r23
 b52:	6f 91       	pop	r22
 b54:	5f 91       	pop	r21
 b56:	4f 91       	pop	r20
 b58:	3f 91       	pop	r19
 b5a:	2f 91       	pop	r18
 b5c:	0f 90       	pop	r0
 b5e:	0f be       	out	0x3f, r0	; 63
 b60:	0f 90       	pop	r0
 b62:	1f 90       	pop	r1
 b64:	18 95       	reti

00000b66 <__vector_14>:
void USART_ISR_REGISTER_EMPTY(void)
{
 b66:	1f 92       	push	r1
 b68:	0f 92       	push	r0
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	0f 92       	push	r0
 b6e:	11 24       	eor	r1, r1
 b70:	2f 93       	push	r18
 b72:	3f 93       	push	r19
 b74:	4f 93       	push	r20
 b76:	5f 93       	push	r21
 b78:	6f 93       	push	r22
 b7a:	7f 93       	push	r23
 b7c:	8f 93       	push	r24
 b7e:	9f 93       	push	r25
 b80:	af 93       	push	r26
 b82:	bf 93       	push	r27
 b84:	ef 93       	push	r30
 b86:	ff 93       	push	r31
	USART_callBacks[0]();
 b88:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <USART_callBacks>
 b8c:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <USART_callBacks+0x1>
 b90:	09 95       	icall
}
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	7f 91       	pop	r23
 ba0:	6f 91       	pop	r22
 ba2:	5f 91       	pop	r21
 ba4:	4f 91       	pop	r20
 ba6:	3f 91       	pop	r19
 ba8:	2f 91       	pop	r18
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <__udivmodsi4>:
 bb4:	a1 e2       	ldi	r26, 0x21	; 33
 bb6:	1a 2e       	mov	r1, r26
 bb8:	aa 1b       	sub	r26, r26
 bba:	bb 1b       	sub	r27, r27
 bbc:	fd 01       	movw	r30, r26
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <__udivmodsi4_ep>

00000bc0 <__udivmodsi4_loop>:
 bc0:	aa 1f       	adc	r26, r26
 bc2:	bb 1f       	adc	r27, r27
 bc4:	ee 1f       	adc	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	a2 17       	cp	r26, r18
 bca:	b3 07       	cpc	r27, r19
 bcc:	e4 07       	cpc	r30, r20
 bce:	f5 07       	cpc	r31, r21
 bd0:	20 f0       	brcs	.+8      	; 0xbda <__udivmodsi4_ep>
 bd2:	a2 1b       	sub	r26, r18
 bd4:	b3 0b       	sbc	r27, r19
 bd6:	e4 0b       	sbc	r30, r20
 bd8:	f5 0b       	sbc	r31, r21

00000bda <__udivmodsi4_ep>:
 bda:	66 1f       	adc	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	1a 94       	dec	r1
 be4:	69 f7       	brne	.-38     	; 0xbc0 <__udivmodsi4_loop>
 be6:	60 95       	com	r22
 be8:	70 95       	com	r23
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	9b 01       	movw	r18, r22
 bf0:	ac 01       	movw	r20, r24
 bf2:	bd 01       	movw	r22, r26
 bf4:	cf 01       	movw	r24, r30
 bf6:	08 95       	ret

00000bf8 <_exit>:
 bf8:	f8 94       	cli

00000bfa <__stop_program>:
 bfa:	ff cf       	rjmp	.-2      	; 0xbfa <__stop_program>
